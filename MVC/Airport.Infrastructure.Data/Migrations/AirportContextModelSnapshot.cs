// <auto-generated />
using System;
using Airport.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Airport.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AirportContext))]
    partial class AirportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Destination");

                    b.Property<string>("ImgURL");

                    b.Property<string>("Origin");

                    b.Property<bool>("PublicFlag");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.Seat", b =>
                {
                    b.Property<int>("FlightId");

                    b.Property<string>("Class");

                    b.Property<int>("Cappacity");

                    b.Property<decimal>("Price");

                    b.HasKey("FlightId", "Class");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassId");

                    b.Property<bool>("Confirmed");

                    b.Property<int>("FlightId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UserId")
                        .HasColumnName("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("FlightId", "ClassId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.Seat", b =>
                {
                    b.HasOne("Airport.Infrastructure.Models.Models.Flight", "Flight")
                        .WithMany("FlightSeats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Airport.Infrastructure.Models.Models.Ticket", b =>
                {
                    b.HasOne("Airport.Infrastructure.Models.Models.Flight")
                        .WithMany("FlightTickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airport.Infrastructure.Models.Models.User", "User")
                        .WithMany("UserTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Airport.Infrastructure.Models.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId", "ClassId");
                });
#pragma warning restore 612, 618
        }
    }
}
